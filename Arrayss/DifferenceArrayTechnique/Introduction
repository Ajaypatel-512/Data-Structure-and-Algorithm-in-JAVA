This is a famous technique use to efficiently apply range of updates to an array.
It helps to do multiple updates in a constant time.

Approach 1 : Brute Force
1. For each update, iterate from start to end and add the value to each element.
2. Time Complexity : O(n * m) where n is the length of array and m is the number of updates.
3. Space Complexity : O(1)

Approach 2 : Difference Array Technique
1. Create a difference array of length n+1 and initialize all elements to 0.
2. For each update, add the value to start index and subtract the value from end index + 1.
3. Now, iterate through the difference array and keep adding the elements to the original array.(Cumulative Sum)
4. Time Complexity : O(n + m) where n is the length of array and m is the number of updates.
5. Space Complexity : O(n)

[L,R,x] --> add x to all elements from index L to R i.e arr[L] += x and arr[R+1] -= x


Example:
int[] nums = {0,0,0,0,0};
int[][] updates = {{1,3,2}, {2,4,3}, {0,2,-2}};

{1,3,2} --> add 2 to all elements from index 1 to 3 {0,2,0,0,-2}
{2,4,3} --> add 3 to all elements from index 2 to 4 {0,2,3,0,-2}
{0,2,-2} --> add -2 to all elements from index 0 to 2 {-2,2,3,2,-2}
find cummulative sum of the array {-2,0,3,5,3}

Output: [-2,0,3,5,3]

class Solution {
    public int[] getModifiedArray(int length, int[][] updates) {
        int[] arr = new int[length];
        Arrays.fill(arr, 0);
        for(int[] update : updates){
            int start = update[0];
            int end = update[1];
            int value = update[2];

            arr[start] += value;
            if(end+1 < length){
                arr[end+1] -= value;
            }
        }
        for(int i=1; i<length; i++){
            arr[i] += arr[i-1];
        }
        return arr;
    }
}



*/